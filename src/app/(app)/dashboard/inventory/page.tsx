
// @ts-nocheck
'use client';

import type { Product } from '@/types';
import React, { useState, useEffect, useMemo, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogClose, DialogDescription } from '@/components/ui/dialog';
import { PlusCircle, Edit3, Trash2, Search, Package, PackageOpen, AlertCircle, XCircle, RefreshCw, FileSpreadsheet, MoreVertical, QrCode, FileUp, ChevronLeft, ChevronRight, Receipt } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { BarcodeDisplay } from '@/components/inventory/BarcodeDisplay';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Skeleton } from '@/components/ui/skeleton';
import { cn } from '@/lib/utils';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import * as dataStore from '@/lib/data-store';
import * as XLSX from 'xlsx';
import { useIsMobile } from '@/hooks/use-mobile';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';


const productSchema = z.object({
  name: z.string().min(1, { message: 'Product name is required' }),
  price: z.coerce.number().positive({ message: 'Price must be a positive number' }),
  quantity: z.coerce.number().int().nonnegative({ message: 'Quantity must be a non-negative integer' }),
  uniqueId: z.string().min(1, { message: 'Barcode ID is required' }),
});

type ProductFormData = z.infer<typeof productSchema>;

const ITEMS_PER_PAGE = 50;

const fetchProducts = async (): Promise<Product[]> => {
  const products = await dataStore.getProducts({ orderBy: 'name', orderDirection: 'asc' }); 
  return products;
};

// Standardized Unique ID generator
const generateUniqueId = () => {
  const timestampPart = Date.now().toString(36).toUpperCase();
  const randomPart = Math.random().toString(36).substring(2, 7).toUpperCase();
  return `PROD-${timestampPart}-${randomPart}`;
};

export default function InventoryPage() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isProductDialogOpen, setIsProductDialogOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [productToDelete, setProductToDelete] = useState<Product | null>(null);
  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const isMobile = useIsMobile();
  const [currentPage, setCurrentPage] = useState(1);

  const [selectedProductForBarcode, setSelectedProductForBarcode] = useState<Product | null>(null);
  const [isBarcodeDialogOpen, setIsBarcodeDialogOpen] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const { data: products = [], isLoading: productsLoading, error: productsError, refetch: refetchProducts } = useQuery<Product[], Error>({
    queryKey: ['products'],
    queryFn: fetchProducts,
  });

  const { register, handleSubmit, reset, formState: { errors, isSubmitting }, setValue: setFormValue, watch, trigger } = useForm<ProductFormData>({
    resolver: zodResolver(productSchema),
    defaultValues: {
      name: '',
      price: 0,
      quantity: 0,
      uniqueId: generateUniqueId(), 
    }
  });
  
  const currentUniqueId = watch('uniqueId');
  const currentName = watch('name');

  useEffect(() => {
    if (editingProduct && isProductDialogOpen) {
      setFormValue('name', editingProduct.name);
      setFormValue('price', editingProduct.price);
      setFormValue('quantity', editingProduct.quantity);
      setFormValue('uniqueId', editingProduct.uniqueId);
    } else if (!editingProduct && isProductDialogOpen) {
        if (!watch('uniqueId')) {
             setFormValue('uniqueId', generateUniqueId());
        }
    }
  }, [editingProduct, isProductDialogOpen, setFormValue, watch]);


  const addProductMutation = useMutation({
    mutationFn: async (newProductData: ProductFormData) => {
      let dataToSubmit = { ...newProductData };
      const isAutoGeneratedId = newProductData.uniqueId.startsWith('PROD-');

      if (isAutoGeneratedId && newProductData.name) {
        const godownMatches = await dataStore.getGodownProducts({ name: newProductData.name });
        if (godownMatches.length === 1) {
          const godownProduct = godownMatches[0];
          const inventoryCheckWithGodownId = await dataStore.getProductByUniqueId(godownProduct.uniqueId);
          if (!inventoryCheckWithGodownId) { 
            dataToSubmit.uniqueId = godownProduct.uniqueId;
            dataToSubmit.price = godownProduct.price; 
            toast({ title: "Synced with Godown", description: `Using Barcode ID '${godownProduct.uniqueId}' and Price â‚¹${godownProduct.price.toFixed(2)} from Godown for '${godownProduct.name}'.`, duration: 7000});
          }
        }
      }

      const existingProductByBarcodeInInventory = await dataStore.getProductByUniqueId(dataToSubmit.uniqueId);
      if (existingProductByBarcodeInInventory) {
         throw new Error(`Barcode ID ${dataToSubmit.uniqueId} already exists in inventory for '${existingProductByBarcodeInInventory.name}'. Please use a different ID or update the existing product.`);
      }

      const godownProductWithSameId = await dataStore.getGodownProductByUniqueId(dataToSubmit.uniqueId);
      if (godownProductWithSameId && godownProductWithSameId.name.toLowerCase() !== dataToSubmit.name.toLowerCase()) {
          throw new Error(`Error: Barcode ID ${dataToSubmit.uniqueId} is already used by '${godownProductWithSameId.name}' in Godown. Barcodes must be unique per product entity and names should match if IDs are the same.`);
      }
      
      const addedProduct = await dataStore.addProduct(dataToSubmit);
      return addedProduct;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
      queryClient.invalidateQueries({ queryKey: ['dashboardData'] });
      queryClient.invalidateQueries({ queryKey: ['lowStockProducts'] });
      queryClient.invalidateQueries({ queryKey: ['godownProducts'] }); 
      toast({ title: 'Product Added', description: 'New product has been successfully added to inventory.', className: 'bg-primary text-primary-foreground'});
      setIsProductDialogOpen(false); 
    },
    onError: (error: Error) => {
      toast({ title: 'Error Adding Product', description: error.message, variant: 'destructive' });
    },
  });

  const updateProductMutation = useMutation({
    mutationFn: async (updatedProductData: ProductFormData & { id: string }) => { 
      if (!updatedProductData.id) throw new Error('Product ID not found for update.');
      
      if (updatedProductData.uniqueId !== editingProduct?.uniqueId && editingProduct) { 
        const existingProductByBarcode = await dataStore.getProductByUniqueId(updatedProductData.uniqueId);
         if (existingProductByBarcode && existingProductByBarcode.id !== updatedProductData.id) {
           throw new Error(`Barcode ID ${updatedProductData.uniqueId} already exists for another product in inventory.`);
        }
        const godownProductWithSameId = await dataStore.getGodownProductByUniqueId(updatedProductData.uniqueId);
        if (godownProductWithSameId && godownProductWithSameId.name.toLowerCase() !== updatedProductData.name.toLowerCase()) {
            throw new Error(`Error: Barcode ID ${updatedProductData.uniqueId} is already used by '${godownProductWithSameId.name}' in Godown. Cannot change ID to conflict.`);
        }
      }
      const { id, ...payload } = updatedProductData;
      const updated = await dataStore.updateProduct(id, payload); 
      if (!updated) throw new Error('Failed to update product in data store.');
      return updated;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
      queryClient.invalidateQueries({ queryKey: ['dashboardData'] });
      queryClient.invalidateQueries({ queryKey: ['lowStockProducts'] });
      queryClient.invalidateQueries({ queryKey: ['godownProducts'] }); 
      toast({ title: 'Product Updated', description: 'Product details have been successfully updated.', className: 'bg-primary text-primary-foreground'});
      setIsProductDialogOpen(false);
    },
    onError: (error: Error) => {
      toast({ title: 'Error Updating Product', description: error.message, variant: 'destructive' });
    },
  });

  const deleteProductMutation = useMutation({
    mutationFn: async (productId: string) => {
      const success = await dataStore.deleteProduct(productId);
      if (!success) throw new Error('Failed to delete product from data store.');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
      queryClient.invalidateQueries({ queryKey: ['dashboardData'] });
      queryClient.invalidateQueries({ queryKey: ['lowStockProducts'] });
      toast({ title: 'Product Deleted', description: 'Product has been successfully deleted.', className: 'bg-destructive text-destructive-foreground' });
      setIsDeleteConfirmOpen(false);
      setProductToDelete(null);
    },
    onError: (error: Error) => {
      toast({ title: 'Error Deleting Product', description: error.message, variant: 'destructive' });
    },
  });


  const onSubmit: SubmitHandler<ProductFormData> = async (data) => {
    if (editingProduct) {
      await updateProductMutation.mutateAsync({ ...data, id: editingProduct.id });
    } else {
      // Check if product with the same name already exists in Inventory
      const existingProductsByName = await dataStore.getProducts({ name: data.name });
      if (existingProductsByName.length === 1) {
        const productToUpdate = existingProductsByName[0];
        const newQuantity = productToUpdate.quantity + data.quantity;
        await updateProductMutation.mutateAsync({ 
          id: productToUpdate.id, 
          name: data.name, // Update name in case of casing changes
          price: data.price, // Update price
          quantity: newQuantity, // Add to existing quantity
          uniqueId: productToUpdate.uniqueId // Keep existing uniqueId
        });
        toast({ title: 'Product Updated', description: `${data.name} quantity increased and price updated.`, className: 'bg-primary text-primary-foreground' });
        setIsProductDialogOpen(false);
      } else if (existingProductsByName.length > 1) {
        toast({ title: 'Error', description: `Multiple products found with the name "${data.name}". Please use a unique name or update via Barcode ID.`, variant: 'destructive' });
      }
      else {
        await addProductMutation.mutateAsync(data);
      }
    }
  };
  
  const openAddProductDialog = () => {
    setEditingProduct(null);
    reset({ name: '', price: 0, quantity: 0, uniqueId: generateUniqueId() });
    setIsProductDialogOpen(true);
  };

  const openEditProductDialog = (product: Product) => {
    setEditingProduct(product);
    setIsProductDialogOpen(true);
  };

  const openDeleteConfirmDialog = (product: Product) => {
    setProductToDelete(product);
    setIsDeleteConfirmOpen(true);
  };

  const openViewBarcodeDialog = (product: Product) => {
    setSelectedProductForBarcode(product);
    setIsBarcodeDialogOpen(true);
  };

  const filteredProducts = useMemo(() => {
    if (!searchTerm) return products;
    return products.filter(product =>
      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (product.uniqueId && product.uniqueId.toLowerCase().includes(searchTerm.toLowerCase()))
    );
  }, [products, searchTerm]);
  
  useEffect(() => {
    setCurrentPage(1); 
  }, [searchTerm]);

  const paginatedProducts = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    return filteredProducts.slice(startIndex, endIndex);
  }, [filteredProducts, currentPage]);

  const totalPages = Math.ceil(filteredProducts.length / ITEMS_PER_PAGE);

  const totalInventoryStockValue = useMemo(() => {
    if (productsLoading || !products) return 0;
    return products.reduce((acc, product) => acc + (product.quantity * product.price), 0);
  }, [products, productsLoading]);


  const handleExportInventory = () => {
    if (filteredProducts.length === 0) {
      toast({ title: 'No Data', description: 'There are no products to export.', variant: 'destructive' });
      return;
    }
    const dataToExport = filteredProducts.map(p => ({
      'Product ID (Firestore)': p.id, 
      'Name': p.name,
      'Price (â‚¹)': p.price.toFixed(2),
      'Quantity': p.quantity,
      'Barcode ID': p.uniqueId,
      'Created At': p.createdAt ? new Date(p.createdAt).toLocaleString() : 'N/A',
      'Updated At': p.updatedAt ? new Date(p.updatedAt).toLocaleString() : 'N/A',
    }));
    const worksheet = XLSX.utils.json_to_sheet(dataToExport);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Inventory');
    XLSX.writeFile(workbook, 'inventory_export.xlsx');
    toast({ title: 'Export Successful', description: 'Inventory data has been exported to Excel.' });
  };
  
  const handleImportClick = () => {
    fileInputRef.current?.click();
  };

  const handleFileImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) {
      toast({ title: "No file selected", variant: "destructive" });
      return;
    }
    if (event.target) event.target.value = ''; 

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const data = e.target?.result;
        if (!data) throw new Error("Error reading file data.");
        const workbook = XLSX.read(data, { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json<any>(worksheet);

        if (jsonData.length === 0) {
          toast({ title: "Empty Excel Sheet", description: "No data found.", variant: "destructive" });
          return;
        }
        
        const headers = Object.keys(jsonData[0]);
        const findHeader = (target: string) => headers.find(h => h.toLowerCase() === target.toLowerCase());
        
        const nameHeader = findHeader('name');
        const priceHeader = findHeader('price');
        const quantityHeader = findHeader('quantity');
        let uniqueIdHeader = findHeader('uniqueid') || findHeader('barcodeid') || findHeader('barcode id');

        if (!nameHeader || !priceHeader || !quantityHeader ) { 
          toast({
            title: "Invalid Excel Format",
            description: "Missing required columns. Ensure 'Name', 'Price', 'Quantity' are present. 'UniqueID' (or 'BarcodeID') is optional.",
            variant: "destructive",
            duration: 10000,
          });
          return;
        }

        let importedCount = 0, updatedCount = 0, skippedCount = 0, errorCount = 0;
        const errorsList: string[] = [];
        toast({ title: "Importing Products...", description: `Processing ${jsonData.length} rows...` });

        for (const row of jsonData) {
          let uniqueIdFromExcel = String(row[uniqueIdHeader] || '').trim();
          const nameFromExcel = String(row[nameHeader] || '').trim();
          const priceFromExcel = parseFloat(String(row[priceHeader] || 0));
          const quantityFromExcel = parseInt(String(row[quantityHeader] || 0), 10);

          let finalUniqueId = uniqueIdFromExcel;
          let finalPrice = priceFromExcel;
          let finalName = nameFromExcel;
          let autoSyncMessage = "";

          if (!nameFromExcel) {
            skippedCount++;
            errorsList.push(`Skipped row: Name is missing.`);
            continue;
          }
          if (isNaN(priceFromExcel) || priceFromExcel <= 0) {
            skippedCount++;
            errorsList.push(`Skipped row for "${nameFromExcel}": Price is invalid or missing.`);
            continue;
          }
          if (isNaN(quantityFromExcel) || quantityFromExcel < 0) {
            skippedCount++;
            errorsList.push(`Skipped row for "${nameFromExcel}": Quantity is invalid or missing.`);
            continue;
          }

          try {
            let existingInventoryProduct = null;
            if (finalUniqueId) {
              existingInventoryProduct = await dataStore.getProductByUniqueId(finalUniqueId);
            }
            
            if (!existingInventoryProduct && !finalUniqueId) { // If no UniqueID in Excel or if UniqueID didn't match, try by name
                const inventoryMatchesByName = await dataStore.getProducts({ name: finalName });
                if (inventoryMatchesByName.length === 1) {
                    existingInventoryProduct = inventoryMatchesByName[0];
                    finalUniqueId = existingInventoryProduct.uniqueId; // Use existing ID
                    autoSyncMessage = ` (Matched existing Inventory product by name: '${finalName}', ID: ${finalUniqueId})`;
                } else if (inventoryMatchesByName.length > 1) {
                    skippedCount++;
                    errorsList.push(`Skipped "${finalName}": Multiple Inventory products found with this name. Please provide a UniqueID or ensure names are unique to update by name.`);
                    continue;
                }
            }


            if (existingInventoryProduct) {
              const updates: Partial<Product> = {
                name: finalName, 
                price: finalPrice, 
                quantity: existingInventoryProduct.quantity + quantityFromExcel, 
              };
              await dataStore.updateProduct(existingInventoryProduct.id, updates);
              updatedCount++;
              if(autoSyncMessage) toast({title: "Info", description: `Updated product '${finalName}'` + autoSyncMessage, duration: 5000 });

            } else { // Product does not exist by UniqueID or Name, proceed to add new
              if (!finalUniqueId) { // If UniqueID was empty and no name match, generate one
                const godownMatchesByName = await dataStore.getGodownProducts({ name: finalName });
                if (godownMatchesByName.length === 1) {
                  const godownProduct = godownMatchesByName[0];
                  // Check if this godown uniqueId is already in inventory with a different name
                  const inventoryCheckWithGodownId = await dataStore.getProductByUniqueId(godownProduct.uniqueId);
                  if (inventoryCheckWithGodownId && inventoryCheckWithGodownId.name.toLowerCase() !== finalName.toLowerCase()) {
                     skippedCount++;
                     errorsList.push(`Skipped "${finalName}": Godown product with same name has Barcode ID ${godownProduct.uniqueId}, which is used by a different product ('${inventoryCheckWithGodownId.name}') in Inventory. Please resolve conflict.`);
                     continue;
                  }
                  finalUniqueId = godownProduct.uniqueId;
                  if(priceFromExcel === 0 || isNaN(priceFromExcel)) finalPrice = godownProduct.price; 
                  autoSyncMessage = ` (Synced ID ${finalUniqueId} & Price â‚¹${finalPrice.toFixed(2)} from Godown based on name match for '${finalName}')`;
                } else {
                  finalUniqueId = generateUniqueId(); 
                }
              }
              
              const godownProductWithSameId = await dataStore.getGodownProductByUniqueId(finalUniqueId);
              if (godownProductWithSameId && godownProductWithSameId.name.toLowerCase() !== finalName.toLowerCase()) {
                skippedCount++;
                errorsList.push(`Skipped "${finalName}": Barcode ID ${finalUniqueId} is used by a different product ('${godownProductWithSameId.name}') in Godown. Please resolve conflict.`);
                continue;
              }

              const newProductData: Omit<Product, 'id' | 'createdAt' | 'updatedAt'> = {
                name: finalName,
                price: finalPrice,
                quantity: quantityFromExcel, 
                uniqueId: finalUniqueId,
              };
              await dataStore.addProduct(newProductData);
              importedCount++;
              if(autoSyncMessage && !autoSyncMessage.includes("Matched existing Inventory product by name")) toast({title: "Info", description: `Imported product '${finalName}'` + autoSyncMessage, duration: 5000 });
            }
          } catch (error: any) {
            errorCount++;
            errorsList.push(`Error processing "${finalName}" (ID: ${finalUniqueId}): ${error.message}`);
          }
        }
        
        let summaryDesc = `Processed: ${jsonData.length}. Imported: ${importedCount}. Updated: ${updatedCount}.`;
        if (skippedCount > 0) summaryDesc += ` Skipped: ${skippedCount}.`;
        if (errorCount > 0) summaryDesc += ` Failed: ${errorCount}.`;
        toast({ title: "Import Complete", description: summaryDesc, duration: 7000 });

        if (errorsList.length > 0) {
           toast({
            title: "Import Details",
            description: (<ScrollArea className="h-24"><ul className="text-xs list-disc pl-4">{errorsList.map((err, i) => <li key={i}>{err}</li>)}</ul></ScrollArea>),
            variant: "destructive",
            duration: 15000
          });
          console.error("Import errors/skipped rows:", errorsList);
        }
        if (importedCount > 0 || updatedCount > 0) {
          queryClient.invalidateQueries({ queryKey: ['products'] });
          queryClient.invalidateQueries({ queryKey: ['dashboardData'] });
          queryClient.invalidateQueries({ queryKey: ['lowStockProducts'] });
          queryClient.invalidateQueries({ queryKey: ['godownProducts'] }); 
        }
      } catch (error: any) {
        toast({ title: "Import Failed", description: `Error processing file: ${error.message}`, variant: "destructive" });
      }
    };
    reader.readAsArrayBuffer(file);
  };


  if (productsError) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-destructive">
        <XCircle className="w-16 h-16 mb-4" />
        <h2 className="text-2xl font-semibold mb-2">Error Loading Products</h2>
        <p className="text-center mb-1">Could not fetch product data. Please check your connection or the console for more details.</p>
        <p className="text-center text-xs mb-4">Details: {productsError.message}</p>
        <Button onClick={() => refetchProducts()} className="mt-4">
          Retry
        </Button>
      </div>
    );
  }

  const handleRegenerateUniqueId = () => {
      setFormValue('uniqueId', generateUniqueId(), { shouldValidate: true });
  };

  const handleNameBlur = async () => {
    if (!editingProduct && currentName && watch('uniqueId').startsWith('PROD-')) { 
      try {
        // Check if name already exists in INVENTORY
        const inventoryMatches = await dataStore.getProducts({ name: currentName });
        if (inventoryMatches.length === 1) {
            const existingInvProduct = inventoryMatches[0];
            setFormValue('uniqueId', existingInvProduct.uniqueId, { shouldValidate: true });
            setFormValue('price', existingInvProduct.price, { shouldValidate: true });
            setFormValue('quantity', 0); // Default to 0 for adding, user can specify
            toast({
              title: "Product Exists in Inventory",
              description: `"${currentName}" found. Barcode ID and Price pre-filled. Enter quantity to add.`,
              duration: 6000,
            });
            trigger(['uniqueId', 'price', 'quantity']);
            return; // Stop further checks if found in current store
        }

        // If not in INVENTORY, then check GODOWN
        const godownMatches = await dataStore.getGodownProducts({ name: currentName });
        if (godownMatches.length === 1) {
          const godownProduct = godownMatches[0];
          // Ensure this godown product's uniqueId isn't already in inventory with a *different* name
          const inventoryCheckWithGodownId = await dataStore.getProductByUniqueId(godownProduct.uniqueId);
          if (!inventoryCheckWithGodownId || inventoryCheckWithGodownId.name.toLowerCase() === currentName.toLowerCase()) {
            setFormValue('uniqueId', godownProduct.uniqueId, { shouldValidate: true });
            setFormValue('price', godownProduct.price, { shouldValidate: true });
            toast({
              title: "Auto-filled from Godown",
              description: `Barcode ID and Price for "${currentName}" have been pre-filled from Godown stock.`,
              duration: 6000,
            });
            trigger(['uniqueId', 'price']); 
          }
        }
      } catch (error) {
        console.error("Error checking godown/inventory for product:", error);
      }
    }
  };


  return (
    <div className="flex flex-col h-full space-y-4 md:space-y-6 p-4 md:p-6">
      <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight text-primary flex items-center">
          <PackageOpen className="mr-2 md:mr-3 h-7 w-7 md:h-8 md:w-8" />
          Inventory Management
        </h1>
        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
          <div className="relative flex-grow sm:flex-grow-0">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
            <Input
              type="search"
              placeholder="Search products..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 w-full sm:w-56 md:w-64"
            />
          </div>
          <input 
            type="file" 
            ref={fileInputRef} 
            onChange={handleFileImport} 
            accept=".xlsx, .xls" 
            className="hidden" 
          />
          <Button onClick={handleImportClick} variant="outline" className="w-full sm:w-auto">
            <FileUp className="mr-2 h-5 w-5" /> Import Excel
          </Button>
          <Button onClick={handleExportInventory} variant="outline" className="w-full sm:w-auto">
            <FileSpreadsheet className="mr-2 h-5 w-5" /> Export Excel
          </Button>
          <Button onClick={openAddProductDialog} className="bg-primary hover:bg-primary/90 text-primary-foreground w-full sm:w-auto">
            <PlusCircle className="mr-2 h-5 w-5" /> Add New Product
          </Button>
        </div>
      </div>

      <Card className="shadow-lg">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle className="text-lg">Total Inventory Stock Value</CardTitle>
          <Receipt className="h-6 w-6 text-green-500" />
        </CardHeader>
        <CardContent>
          {productsLoading ? (
            <Skeleton className="h-8 w-32" />
          ) : (
            <div className="text-3xl font-bold text-primary">
              â‚¹{totalInventoryStockValue.toFixed(2)}
            </div>
          )}
           <CardDescription className="text-xs text-muted-foreground mt-1">
            Estimated total value of all products currently in inventory.
          </CardDescription>
        </CardContent>
      </Card>


      <Card className="shadow-lg flex-grow flex flex-col overflow-hidden">
        <CardHeader>
          <CardTitle>Product List</CardTitle>
          <CardDescription>
            View, edit, or delete products. Import from Excel (.xlsx, .xls) with columns: Name, Price, Quantity. UniqueID (or BarcodeID) is optional. If name matches existing Inventory item, quantity added & price updated. If UniqueID empty & name matches Godown, Godown ID/Price used.
          </CardDescription>
        </CardHeader>
        <CardContent className="flex-grow p-0 md:p-0 overflow-hidden">
          {productsLoading ? (
            <InventorySkeleton />
          ) : paginatedProducts.length === 0 ? (
             <div className="text-center py-10 text-muted-foreground h-full flex flex-col justify-center items-center">
                <Package className="h-12 w-12 md:h-16 md:w-16 mx-auto mb-3" />
                <p className="text-base md:text-lg font-medium">No products found.</p>
                {searchTerm ? 
                    <p className="text-sm md:text-base">Try adjusting your search term or add new products.</p> : 
                    <p className="text-sm md:text-base">Get started by adding your first product or importing from Excel.</p>
                }
            </div>
          ) : (
            <ScrollArea className="h-full w-full">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[5%] min-w-[60px]">S.No.</TableHead>
                    <TableHead className="w-[25%] min-w-[150px]">Name</TableHead>
                    <TableHead className="min-w-[80px]">Price</TableHead>
                    <TableHead className="min-w-[80px]">Quantity</TableHead>
                    <TableHead className="min-w-[100px]">Total Value</TableHead>
                    <TableHead className="min-w-[180px]">Barcode ID</TableHead>
                    <TableHead className="text-right min-w-[100px]">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {paginatedProducts.map((product, index) => (
                    <TableRow key={product.id} className={cn(product.quantity < 10 && "bg-yellow-500/10 hover:bg-yellow-500/20")}>
                      <TableCell>{(currentPage - 1) * ITEMS_PER_PAGE + index + 1}</TableCell>
                      <TableCell className="font-medium">{product.name}</TableCell>
                      <TableCell>â‚¹{product.price.toFixed(2)}</TableCell>
                      <TableCell className={cn(product.quantity < 10 ? "text-destructive font-bold" : "")}>
                        {product.quantity}
                        {product.quantity < 10 && <AlertCircle className="inline ml-1 h-4 w-4 text-destructive" title="Low Stock"/>}
                      </TableCell>
                       <TableCell className="font-semibold">â‚¹{(product.quantity * product.price).toFixed(2)}</TableCell>
                      <TableCell>
                        <div className="flex flex-col items-start">
                          <span>{product.uniqueId}</span>
                          {!isMobile && (
                            <Dialog>
                              <DialogTrigger asChild>
                                 <Button variant="link" size="sm" className="p-0 h-auto text-xs text-primary hover:underline">View Barcode</Button>
                              </DialogTrigger>
                              <DialogContent className="sm:max-w-md">
                                  <DialogHeader>
                                      <DialogTitle>Barcode for {product.name}</DialogTitle>
                                  </DialogHeader>
                                  <div className="py-4 flex justify-center">
                                      <BarcodeDisplay value={product.uniqueId} interactive />
                                  </div>
                                  <DialogFooter>
                                      <DialogClose asChild><Button type="button">Close</Button></DialogClose>
                                  </DialogFooter>
                              </DialogContent>
                            </Dialog>
                          )}
                        </div>
                      </TableCell>
                      <TableCell className="text-right">
                        {isMobile ? (
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon">
                                <MoreVertical className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem onClick={() => openViewBarcodeDialog(product)}>
                                <QrCode className="mr-2 h-4 w-4" /> View Barcode
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => openEditProductDialog(product)}>
                                <Edit3 className="mr-2 h-4 w-4" /> Edit
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => openDeleteConfirmDialog(product)} className="text-destructive focus:text-destructive focus:bg-destructive/10">
                                <Trash2 className="mr-2 h-4 w-4" /> Delete
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        ) : (
                          <>
                            <Button variant="ghost" size="icon" onClick={() => openEditProductDialog(product)} className="text-primary hover:text-primary/80 mr-1">
                              <Edit3 className="h-4 w-4" />
                            </Button>
                            <Button variant="ghost" size="icon" onClick={() => openDeleteConfirmDialog(product)} className="text-destructive hover:text-destructive/80">
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </ScrollArea>
          )}
        </CardContent>
         <CardFooter className="flex flex-col sm:flex-row justify-between items-center text-sm text-muted-foreground pt-4 border-t">
          <div>
            Showing {(currentPage - 1) * ITEMS_PER_PAGE + 1 > filteredProducts.length && filteredProducts.length > 0 ? filteredProducts.length : Math.min((currentPage - 1) * ITEMS_PER_PAGE + 1, filteredProducts.length)}
            &nbsp;to {Math.min(currentPage * ITEMS_PER_PAGE, filteredProducts.length)} of {filteredProducts.length} products.
          </div>
          {totalPages > 1 && (
            <div className="flex items-center space-x-2 mt-2 sm:mt-0">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                disabled={currentPage === 1}
              >
                <ChevronLeft className="h-4 w-4 mr-1" /> Previous
              </Button>
              <span className="px-2">Page {currentPage} of {totalPages}</span>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                disabled={currentPage === totalPages}
              >
                Next <ChevronRight className="h-4 w-4 ml-1" />
              </Button>
            </div>
          )}
        </CardFooter>
      </Card>

      <Dialog open={isProductDialogOpen} onOpenChange={ (isOpen) => {
        setIsProductDialogOpen(isOpen);
        if (!isOpen) {
          setEditingProduct(null); 
          reset({ name: '', price: 0, quantity: 0, uniqueId: generateUniqueId() }); 
        }
      }}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>{editingProduct ? 'Edit Product' : 'Add New Product'}</DialogTitle>
            <DialogDescription>
              {editingProduct ? `Update details for ${editingProduct.name}.` : 'Enter details. If name matches an existing Inventory item, quantity will be added and price updated. If name matches a Godown item & Barcode ID is auto, Godown ID/Price may be used.'}
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 py-2">
            <div>
              <label htmlFor="name" className={cn("block text-sm font-medium mb-1", errors.name && "text-destructive")}>Product Name</label>
              <Input 
                id="name" 
                {...register('name')} 
                onBlur={handleNameBlur}
                className={cn(errors.name && "border-destructive")} 
              />
              {errors.name && <p className="text-xs text-destructive mt-1">{errors.name.message}</p>}
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label htmlFor="price" className={cn("block text-sm font-medium mb-1", errors.price && "text-destructive")}>Price (â‚¹)</label>
                <Input id="price" type="number" step="0.01" {...register('price')} className={cn(errors.price && "border-destructive")} />
                {errors.price && <p className="text-xs text-destructive mt-1">{errors.price.message}</p>}
              </div>
              <div>
                <label htmlFor="quantity" className={cn("block text-sm font-medium mb-1", errors.quantity && "text-destructive")}>Quantity</label>
                <Input id="quantity" type="number" step="1" {...register('quantity')} className={cn(errors.quantity && "border-destructive")} />
                {errors.quantity && <p className="text-xs text-destructive mt-1">{errors.quantity.message}</p>}
              </div>
            </div>
            <div>
              <label htmlFor="uniqueId" className={cn("block text-sm font-medium mb-1", errors.uniqueId && "text-destructive")}>
                Barcode ID
              </label>
              <div className="flex items-center gap-2">
                <Input 
                  id="uniqueId" 
                  {...register('uniqueId')} 
                  className={cn(errors.uniqueId && "border-destructive", "flex-grow")}
                  readOnly={!!editingProduct || (watch('uniqueId') && !watch('uniqueId').startsWith('PROD-'))} 
                />
                <Button 
                    type="button" 
                    variant="outline" 
                    size="icon" 
                    onClick={handleRegenerateUniqueId} 
                    title={editingProduct || (watch('uniqueId') && !watch('uniqueId').startsWith('PROD-')) ? "ID fixed for existing/synced product" : "Regenerate PROD- ID"}
                    disabled={!!editingProduct || (watch('uniqueId') && !watch('uniqueId').startsWith('PROD-'))}
                >
                    <RefreshCw className="h-4 w-4" />
                </Button>
              </div>
              {errors.uniqueId && <p className="text-xs text-destructive mt-1">{errors.uniqueId.message}</p>}
              {currentUniqueId && (
                <div className="mt-2 flex justify-center">
                   <BarcodeDisplay value={currentUniqueId} />
                </div>
              )}
            </div>
            <DialogFooter className="pt-4">
              <DialogClose asChild>
                <Button type="button" variant="outline">Cancel</Button>
              </DialogClose>
              <Button type="submit" disabled={isSubmitting || addProductMutation.isPending || updateProductMutation.isPending} className="bg-primary hover:bg-primary/90 text-primary-foreground">
                {isSubmitting || addProductMutation.isPending || updateProductMutation.isPending ? 'Saving...' : (editingProduct ? 'Save Changes' : 'Add Product')}
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

       <AlertDialog open={isDeleteConfirmOpen} onOpenChange={setIsDeleteConfirmOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the product
              <span className="font-semibold"> {productToDelete?.name}</span>.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setProductToDelete(null)}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => productToDelete && deleteProductMutation.mutate(productToDelete.id)}
              disabled={deleteProductMutation.isPending}
              className="bg-destructive hover:bg-destructive/90 text-destructive-foreground"
            >
              {deleteProductMutation.isPending ? 'Deleting...' : 'Delete'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      <Dialog open={isBarcodeDialogOpen} onOpenChange={(isOpen) => {
        setIsBarcodeDialogOpen(isOpen);
        if (!isOpen) setSelectedProductForBarcode(null);
      }}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Barcode for {selectedProductForBarcode?.name}</DialogTitle>
             <DialogDescription>
                Use this barcode for scanning purposes. You can download or print it.
             </DialogDescription>
          </DialogHeader>
          {selectedProductForBarcode && (
            <div className="py-4 flex justify-center">
              <BarcodeDisplay value={selectedProductForBarcode.uniqueId} interactive />
            </div>
          )}
          <DialogFooter>
            <DialogClose asChild>
              <Button type="button" onClick={() => setSelectedProductForBarcode(null)}>Close</Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}


function InventorySkeleton() {
  return (
    <>
     <Card className="shadow-lg mb-4 md:mb-6">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <Skeleton className="h-6 w-1/2" />
          <Skeleton className="h-6 w-6" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-8 w-32 mb-1" />
          <Skeleton className="h-3 w-3/4" />
        </CardContent>
      </Card>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[5%] min-w-[60px]"><Skeleton className="h-5 w-10" /></TableHead>
            <TableHead className="w-[25%] min-w-[150px]"><Skeleton className="h-5 w-32" /></TableHead>
            <TableHead className="min-w-[80px]"><Skeleton className="h-5 w-16" /></TableHead>
            <TableHead className="min-w-[80px]"><Skeleton className="h-5 w-16" /></TableHead>
            <TableHead className="min-w-[100px]"><Skeleton className="h-5 w-20" /></TableHead>
            <TableHead className="min-w-[180px]"><Skeleton className="h-5 w-24" /></TableHead>
            <TableHead className="text-right min-w-[100px]"><Skeleton className="h-5 w-20" /></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {[...Array(5)].map((_, i) => (
            <TableRow key={i}>
              <TableCell><Skeleton className="h-5 w-full" /></TableCell>
              <TableCell><Skeleton className="h-5 w-full" /></TableCell>
              <TableCell><Skeleton className="h-5 w-full" /></TableCell>
              <TableCell><Skeleton className="h-5 w-full" /></TableCell>
              <TableCell><Skeleton className="h-5 w-full" /></TableCell>
              <TableCell><Skeleton className="h-5 w-full" /></TableCell>
              <TableCell className="text-right space-x-1">
                <Skeleton className="h-8 w-8 inline-block" />
                <Skeleton className="h-8 w-8 inline-block" />
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
       <CardFooter className="flex flex-col sm:flex-row justify-between items-center text-sm text-muted-foreground pt-4 border-t">
          <Skeleton className="h-4 w-40" />
          <div className="flex items-center space-x-2 mt-2 sm:mt-0">
            <Skeleton className="h-8 w-24" />
            <Skeleton className="h-4 w-20" />
            <Skeleton className="h-8 w-20" />
          </div>
      </CardFooter>
    </>
  );
}

